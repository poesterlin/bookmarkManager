/// <reference types="@sveltejs/kit" />
/// <reference lib="WebWorker" />
declare const self: ServiceWorkerGlobalScope;

// import { dev } from '$app/environment';
import { build, files, version } from '$service-worker';

const ASSETS = `cache${version}`;
const enabled = true;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

self.addEventListener('install', async (event) => {
	async function cacheAssets(files: string[]) {
		const cache = await caches.open(ASSETS);
		await cache.addAll(files);
		await self.skipWaiting();
	}

	if (enabled) {
		event.waitUntil(cacheAssets(to_cache));
	}
});

self.addEventListener('activate', (event) => {
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// delete old caches
			for (const key of keys) {
				if (key !== ASSETS) await caches.delete(key);
			}

			self.clients.claim();
		})
	);
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request) {
	const cache = await caches.open(`offline${version}`);

	try {
		const response = await fetch(request);
		cache.put(request, response.clone());
		return response;
	} catch (err) {
		const response = await cache.match(request);
		if (response) return response;

		throw err;
	}
}

self.addEventListener('fetch', (event) => {
	const { request } = event;
	if (!enabled) {
		return;
	}

	if (request.method !== 'GET') {
		return;
	}

	const url = new URL(request.url);

	// don't try to handle e.g. data: URIs
	const isHttp = url.protocol.startsWith('http');
	const isDevServerRequest =
		url.hostname === self.location.hostname && url.port !== self.location.port;
	const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	const skipBecauseUncached = request.cache === 'only-if-cached' && !isStaticAsset;

	if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
		event.respondWith(
			(async () => {
				// always serve static files and bundler-generated assets from cache.
				// if your application has other URLs with data that will never change,
				// set this variable to true for them and they will only be fetched once.
				const cachedAsset = isStaticAsset && (await caches.match(request));

				return cachedAsset || fetchAndCache(request);
			})()
		);
	}
});

self.addEventListener('fetch', (event) => {
	const { request } = event;

	// Regular requests not related to Web Share Target.
	if (request.method !== 'POST') {
		event.respondWith(fetch(request));
		return;
	}

	const { pathname, origin } = new URL(request.url);

	if (pathname !== '/_/web-share-target') {
		event.respondWith(fetch(request));
		return;
	}

	console.info('Web Share Target', request, origin);

	event.respondWith(
		(async () => {
			console.log('Received FormData Entries:');
			const formData = await request.formData();
			for (const [key, value] of formData.entries()) {
				console.log(`${key}: ${value}`);
			}

			const url = formData.get('url') as string | undefined;
			const title = formData.get('title') as string | undefined;
			const description = formData.get('text') as string | undefined;

			console.log('Web Share Target', { url, title, description });

			if (url && URL.canParse(url)) {
				await sendMessageToClients({
					type: 'web-share-target',
					url,
					title,
					description
				});
			}
			// sometimes the URL is not passed in the url field, but in the description
			else if (description && URL.canParse(description)) {
				await sendMessageToClients({
					type: 'web-share-target',
					url: description,
					title
				});
			}

			return Response.redirect('/', 303);
		})()
	);
});


// Function to send a message to all controlled clients
async function sendMessageToClients(message: Record<string, unknown>) {
	try {
	  // Get all window clients controlled by this service worker
	  const clients = await self.clients.matchAll({
		type: "window",
		includeUncontrolled: true, // Often useful to include clients not yet fully controlled
	  });
  
	  if (!clients || clients.length === 0) {
		console.log("SW: No clients to send message to.");
		return;
	  }
  
	  console.log("SW: Sending message to clients:", clients, message);
	  clients.forEach((client) => {
		client.postMessage(message);
	  });
	} catch (error) {
	  console.error("SW Error sending message:", error);
	}
  }
  