/// <reference types="@sveltejs/kit" />
/// <reference lib="WebWorker" />
declare const self: ServiceWorkerGlobalScope;

// import { dev } from '$app/environment';
import { build, files, version } from '$service-worker';

const ASSETS = `cache${version}`;
const enabled = true;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

self.addEventListener('install', async (event) => {
	async function cacheAssets(files: string[]) {
		const cache = await caches.open(ASSETS);
		await cache.addAll(files);
		await self.skipWaiting();
	}

	if (enabled) {
		event.waitUntil(cacheAssets(to_cache));
	}
});

self.addEventListener('activate', (event) => {
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// delete old caches
			for (const key of keys) {
				if (key !== ASSETS) await caches.delete(key);
			}

			self.clients.claim();
		})
	);
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request) {
	const cache = await caches.open(`offline${version}`);

	try {
		const response = await fetch(request);
		cache.put(request, response.clone());
		return response;
	} catch (err) {
		const response = await cache.match(request);
		if (response) return response;

		throw err;
	}
}

self.addEventListener('fetch', (event) => {
	if (!enabled) {
		return;
	}

	if (event.request.method !== 'GET') {
		return;
	}

	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	const isHttp = url.protocol.startsWith('http');
	const isDevServerRequest =
		url.hostname === self.location.hostname && url.port !== self.location.port;
	const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

	if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
		event.respondWith(
			(async () => {
				// always serve static files and bundler-generated assets from cache.
				// if your application has other URLs with data that will never change,
				// set this variable to true for them and they will only be fetched once.
				const cachedAsset = isStaticAsset && (await caches.match(event.request));

				return cachedAsset || fetchAndCache(event.request);
			})()
		);
	}
});

self.addEventListener('fetch', (event) => {
	// Regular requests not related to Web Share Target.
	if (event.request.method !== 'POST') {
		event.respondWith(fetch(event.request));
		return;
	}

	const { origin, pathname } = new URL(event.request.url);

	if (pathname !== '/_/web-share-target') {
		event.respondWith(fetch(event.request));
		return;
	}

	event.respondWith(
		(async () => {
			const formData = await event.request.formData();
			const url = formData.get('url') as string | null;
			const title = formData.get('title') as string;
			const description = formData.get('description') as string;

			if (url && URL.canParse(url)) {
				await saveBookmark(origin, { url, title, description });
			}

			// sometimes the URL is not passed in the url field, but in the description
			if (description && URL.canParse(description)) {
				await saveBookmark(origin, { title, url: description });
			}

			return Response.redirect(origin, 303);
		})()
	);
});

async function saveBookmark(
	host: string,
	bookmark: { url: string; title?: string; description?: string }
) {
	const res = await fetch(host + '/info', {
		method: 'POST',
		body: JSON.stringify({ url: bookmark.url }),
		headers: {
			'Content-Type': 'application/json'
		}
	});

	if (!res.ok) {
		throw new Error('Failed to save bookmark');
	}

	const info = await res.json();

	const form = new FormData();
	form.append('url', bookmark.url);
	form.append('title', bookmark.title ?? info.title);
	form.append('description', bookmark.description ?? info.description);
	form.append('favicon', info.favicon);

	await fetch(host + '/?/add', {
		method: 'POST',
		body: form
	});
}
